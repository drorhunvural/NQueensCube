# -*- coding: utf-8 -*-
"""FinalCubeNQueens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IjKPcJXaGtJUmLGD3QcBP473SAwnc5V-
"""

import numpy as np
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
import matplotlib.pyplot as plt
 
vertices = np.zeros([12,8],dtype=int)
vertices[0,:] = [1, 7, 5, 8, 2, 4, 6, 3]
vertices[1,:] = [1, 7, 4, 6, 8, 2, 5, 3]
vertices[2,:] = [6, 1, 5, 2, 8, 3, 7, 4]
vertices[3,:] = [4, 1, 5, 8, 2, 7, 3, 6]
vertices[4,:] = [5, 1, 8, 4, 2, 7, 3, 6] 
vertices[5,:] = [3, 1, 7, 5, 8, 2, 4, 6]
vertices[6,:] = [5, 1, 4, 6, 8, 2, 7, 3]
vertices[7,:] = [7, 1, 3, 8, 6, 4, 2, 5]
vertices[8,:] = [5, 1, 8, 6, 3, 7, 2, 4]
vertices[9,:] = [5, 7, 1, 4, 2, 8, 6, 3]
vertices[10,:] = [6, 3, 1, 8, 4, 2, 7, 5]
vertices[11,:] = [5, 3, 1, 7, 2, 8, 6, 4]

vertices = vertices - 1 #(adjust the indices by one since python starts with zero indexing)

# Define an array with dimensions 8 by 3
# 8 for each vertex
# -> indices will be vertex1=0, v2=1, v3=2 ...
# 3 for each coordinate
# -> indices will be x=0,y=1,z=1
cube = np.zeros([8,3])

# Define x values
cube[:,0] = [0, 0, 0, 0, 1, 1, 1, 1]
# Define y values
cube[:,1] = [0, 1, 0, 1, 0, 1, 0, 1]
# Define z values
cube[:,2] = [0, 0, 1, 1, 0, 0, 1, 1]

# First initialize the fig variable to a figure
fig1 = plt.figure()
fig1.set_size_inches(15, 10)

fig2 = plt.figure()
fig2.set_size_inches(15, 10)

fig3 = plt.figure()
fig3.set_size_inches(15, 10)

fig4 = plt.figure()
fig4.set_size_inches(15, 10)

fig5 = plt.figure()
fig5.set_size_inches(15, 10)

fig6 = plt.figure()
fig6.set_size_inches(15, 10)

fig7 = plt.figure()
fig7.set_size_inches(15, 10)

fig8 = plt.figure()
fig8.set_size_inches(15, 10)

fig9 = plt.figure()
fig9.set_size_inches(15, 10)

fig10 = plt.figure()
fig10.set_size_inches(15, 10)

fig11 = plt.figure()
fig11.set_size_inches(15, 10)

fig12 = plt.figure()
fig12.set_size_inches(15, 10)
# Add a 3d axis to the figure

ax1 = fig1.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax2 = fig2.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax3 = fig3.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax4 = fig4.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax5 = fig5.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax6 = fig6.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax7 = fig7.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax8 = fig8.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax9 = fig9.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax10 = fig10.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax11 = fig11.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column
ax12 = fig12.add_subplot(111, projection='3d') # "111" means "1x1 grid,1x1 grid = 1 row, 1 column

# plotting cube
# Initialize a list of vertex coordinates for each face
# faces = [np.zeros([5,3])]*3
faces = []
faces.append(np.zeros([5,3]))
faces.append(np.zeros([5,3]))
faces.append(np.zeros([5,3]))
faces.append(np.zeros([5,3]))
faces.append(np.zeros([5,3]))
faces.append(np.zeros([5,3]))
#np.shape(faces) = (6, 5, 3)
# Bottom face
faces[0][:,0] = [0,0,1,1,0]
faces[0][:,1] = [0,1,1,0,0]
faces[0][:,2] = [0,0,0,0,0]
# Top face
faces[1][:,0] = [0,0,1,1,0]
faces[1][:,1] = [0,1,1,0,0]
faces[1][:,2] = [1,1,1,1,1]
# Left Face
faces[2][:,0] = [0,0,0,0,0]
faces[2][:,1] = [0,1,1,0,0]
faces[2][:,2] = [0,0,1,1,0]
# Left Face
faces[3][:,0] = [1,1,1,1,1]
faces[3][:,1] = [0,1,1,0,0]
faces[3][:,2] = [0,0,1,1,0]
# front face
faces[4][:,0] = [0,1,1,0,0]
faces[4][:,1] = [0,0,0,0,0]
faces[4][:,2] = [0,0,1,1,0]
# front face
faces[5][:,0] = [0,1,1,0,0]
faces[5][:,1] = [1,1,1,1,1]
faces[5][:,2] = [0,0,1,1,0]

ax1.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax2.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax3.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax4.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax5.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax6.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax7.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax8.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax9.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax10.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax11.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))
ax12.add_collection3d(Poly3DCollection(faces, facecolors='cyan',linestyle='--', linewidths=0, edgecolors='k', alpha=.25))

# plotting lines

#for i in range(1):
    #ax.plot(cube[vertices[i,:],0],cube[vertices[i,:],1],cube[vertices[i,:],2],color='r')

#ax.plot(cube[vertices[0][0:2],0],cube[vertices[0][0:2],1],cube[vertices[0][0:2],2],color='g')
#ax.plot(cube[vertices[0][2:4],0],cube[vertices[0][2:4],1],cube[vertices[0][2:4],2],color='r')


#print(ax.plot(cube[vertices[0,:],0],cube[vertices[0,:],1],cube[vertices[0,:],2],color='r',alpha=1))
ax1.plot(cube[vertices[0,:],0],cube[vertices[0,:],1],cube[vertices[0,:],2],color='r')
ax2.plot(cube[vertices[1,:],0],cube[vertices[1,:],1],cube[vertices[1,:],2],color='r')
ax3.plot(cube[vertices[2,:],0],cube[vertices[2,:],1],cube[vertices[2,:],2],color='r')
ax4.plot(cube[vertices[3,:],0],cube[vertices[3,:],1],cube[vertices[3,:],2],color='r')
ax5.plot(cube[vertices[4,:],0],cube[vertices[4,:],1],cube[vertices[4,:],2],color='r')
ax6.plot(cube[vertices[5,:],0],cube[vertices[5,:],1],cube[vertices[5,:],2],color='r')
ax7.plot(cube[vertices[6,:],0],cube[vertices[6,:],1],cube[vertices[6,:],2],color='r')
ax8.plot(cube[vertices[7,:],0],cube[vertices[7,:],1],cube[vertices[7,:],2],color='r')
ax9.plot(cube[vertices[8,:],0],cube[vertices[8,:],1],cube[vertices[8,:],2],color='r')
ax10.plot(cube[vertices[9,:],0],cube[vertices[9,:],1],cube[vertices[9,:],2],color='r')
ax11.plot(cube[vertices[10,:],0],cube[vertices[10,:],1],cube[vertices[10,:],2],color='r')
ax12.plot(cube[vertices[11,:],0],cube[vertices[11,:],1],cube[vertices[11,:],2],color='r')

ax1.set_xlabel('X')
ax1.set_ylabel('Y')
ax1.set_zlabel('Z')

plt.show()

